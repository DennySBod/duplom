from telebot import types
from events import send_events, send_news
from parse_weather import send_weather
from lesson_schedule import send_lesson_schedule, send_day_selection_menu, send_class_schedule
from admin import is_admin, send_global_message, send_admin_menu, edit_lesson_schedule, edit_class_schedule, edit_day_schedule, update_lesson
from bell_schedule import send_bell_schedule_for_class, send_bell_schedule
from telegram import bot


selected_class = ""
selected_day = ""
selected_lesson_index = -1

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    try:
        with open("user_ids.txt", 'r') as file:
            user_ids = file.read().splitlines()
    except FileNotFoundError:
        user_ids = []

    if str(user_id) not in user_ids:
        with open("user_ids.txt", 'a') as file:
            file.write(f"{user_id}\n")

    bot.send_message(message.chat.id, text=f"*–í—ñ—Ç–∞—é, {message.chat.username}* üòä\n–Ø - —á–∞—Ç-–±–æ—Ç –ì–æ–Ω—á–∞—Ä—ñ–≤—Å—å–∫–æ–≥–æ –∑–∞–∫–ª–∞–¥—É üåü \n–†–∞–¥–∏–π –±—É—Ç–∏ —Ç–≤–æ—ó–º –æ—Å–æ–±–∏—Å—Ç–∏–º –ø–æ–º—ñ—á–Ω–∏–∫–æ–º —É –≤—Å—ñ—Ö —à–∫—ñ–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω–Ω—è—Ö! üìö\n–ù–µ —Å–æ—Ä–æ–º—Å—è –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏, —è –∑–∞–≤–∂–¥–∏ —Ç—É—Ç, —â–æ–± —Ç–æ–±—ñ –¥–æ–ø–æ–º–æ–≥—Ç–∏! üí¨üè´", parse_mode='Markdown')
    send_main_menu(message)

def send_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ üîî")
    button2 = types.KeyboardButton("–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ üìÖ")
    button4 = types.KeyboardButton("–ü–æ–¥—ñ—ó üéâ")
    button5 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ ‚òÄÔ∏è")
    if is_admin(message.from_user.id):
        button3 = types.KeyboardButton("–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üë§")
    markup.add(button1, button2, button4, button5)
    if is_admin(message.from_user.id):
        markup.add(button3)

    bot.send_message(message.chat.id, text=f"*–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é {message.chat.username}* üòÉ", reply_markup=markup, parse_mode='Markdown')

@bot.message_handler(func=lambda message: message.text in ["1 –ö–õ–ê–°", "2-4 –ö–õ–ê–°", "5-9 –ö–õ–ê–°"])
def handle_class_schedule_request(message):
    class_number = message.text
    send_bell_schedule_for_class(bot, message, class_number)

@bot.message_handler(
    func=lambda message: message.text in ["1 –∫–ª–∞—Å", "2 –∫–ª–∞—Å", "3 –∫–ª–∞—Å", "4 –∫–ª–∞—Å", "5 –∫–ª–∞—Å", "6 –∫–ª–∞—Å", "7 –∫–ª–∞—Å",
                                          "8 –∫–ª–∞—Å", "9 –∫–ª–∞—Å"])
def handle_class_selection(message):
    global selected_class
    selected_class = message.text
    send_day_selection_menu(bot, message)

@bot.message_handler(func=lambda message: message.text in ["–ü–æ–Ω–µ–¥—ñ–ª–æ–∫", "–í—ñ–≤—Ç–æ—Ä–æ–∫", "–°–µ—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä", "–ü'—è—Ç–Ω–∏—Ü—è"])
def handle_day_selection(message):
    global selected_class, selected_day
    selected_day = message.text
    send_class_schedule(bot, message, str(selected_class.split()[0]), selected_day.lower())

@bot.message_handler(func=lambda message: message.text == "–ù–∞–∑–∞–¥ üîÑ")
def handle_back_button(message):
    send_lesson_schedule(bot, message)

@bot.message_handler(func=lambda message: message.text == "–ü–æ–≥–æ–¥–∞ ‚òÄÔ∏è")
def handle_back_button(message):
    send_weather(bot, message)

@bot.message_handler(func=lambda message: message.text == "–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å üë§" and is_admin(message.from_user.id))
def handle_admin_panel(message):
    send_admin_menu(bot, message)

@bot.callback_query_handler(func=lambda call: call.data == "edit_lesson_schedule" and is_admin(call.from_user.id))
def handle_edit_lesson_schedule(call):
    edit_lesson_schedule(bot, call.message)

def process_global_message(message):
    text = message.text
    send_global_message(bot, text)
    bot.send_message(message.chat.id, text="–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º üöÄüì©")

@bot.callback_query_handler(
    func=lambda call: call.data == "send_global_message" and is_admin(call.from_user.id))
def handle_send_global_message(call):
    bot.send_message(call.message.chat.id, text="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º ‚úâÔ∏è: ")
    bot.register_next_step_handler(call.message, process_global_message)

@bot.callback_query_handler(func=lambda call: call.data == "send_news")
def handle_send_news(call):
    send_news(bot, call.message)

@bot.callback_query_handler(func=lambda call: call.data.startswith("class_") and is_admin(call.from_user.id))
def handle_edit_class_schedule(call):
    class_number = str(call.data.split("_")[1])
    edit_class_schedule(bot, call.message, class_number)

@bot.callback_query_handler(func=lambda call: call.data.startswith("day_") and is_admin(call.from_user.id))
def handle_edit_day_schedule(call):
    _, class_number, day = call.data.split("_")
    edit_day_schedule(bot, call.message, str(class_number), day)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lesson_") and is_admin(call.from_user.id))
def handle_edit_lesson(call):
    _, class_number, day, lesson_index = call.data.split("_")
    bot.send_message(call.message.chat.id, text="–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —É—Ä–æ–∫—É üí¨: ")
    bot.register_next_step_handler(call.message, process_new_lesson_name, str(class_number), day, int(lesson_index))

def process_new_lesson_name(message, class_number, day, lesson_index):
    new_lesson = message.text
    update_lesson(bot, message, class_number, day, lesson_index, new_lesson)

@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "–†–æ–∑–∫–ª–∞–¥ –¥–∑–≤—ñ–Ω–∫—ñ–≤ üîî":
        send_bell_schedule(bot, message)
    elif message.text == "–†–æ–∑–∫–ª–∞–¥ —É—Ä–æ–∫—ñ–≤ üìÖ":
        send_lesson_schedule(bot, message)
    elif message.text == "–ü–æ–¥—ñ—ó üéâ":
        send_events(bot, message)
    elif message.text == "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é üè†":
        send_main_menu(message)
    else:
        bot.send_message(message.chat.id, text="–¶—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ —â–æ—Å—å —ñ–Ω—à–µ? ü§∑‚Äç‚ôÇÔ∏è")
        send_main_menu(message)

try:
    bot.infinity_polling(none_stop=True)
except Exception as e:
    print(f"–ü–æ–º–∏–ª–∫–∞: {e}")
